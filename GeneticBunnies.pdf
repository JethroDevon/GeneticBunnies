Genetic Bunnies

Introduction

I was interested to see what it was that an agent or rabbit in this case could take advantage of to help them with their survival, I produced a program that creates a problem space for agents, 

Specification

The program consists of a grid of nodes with food or water properties, that has agents navigating and interacting with it on their own accord. At the center if the grid is a number of nodes that represent water and the rest represent grass each with a set amount of food on it, the agents represent rabbits and they have two needs, food and water.

Not being good at eating and drinking should lead to an earlier death than than a rabbit that is, the longest living rabbit genes are passed on using a crossover algorithm.

If a rabbit has a high capacity for food but does not keep it topped up this will decrease the rabbits life time significantly, it has to be able to drink iccasionaly however as this decreases twice as fast as hunger. Running out of food or water will also kill the rabbit.

The ability to reach food and water is determined by the ratio of ‘grazing cycles’ to moving to the next node in a genetically determined walk along the map, the amount the rabbit eats in one grazing cycle, all the tiles in the rabbits field of view which is also genetically determined and the rabbits metabolism, this effects the speed that the rabbit moves and the speed in which the rabbits hunger decreases.

//link random bunnies

A final feature is breeding, if the rabbits can live, eat and drink for long enough they can persue a breeding partner and if they meet the two parents can produce a baby, the rabbit will have a limited time of gestation and wont be able to breed again until it has drank and eaten some more, this will simulate a more Darwinian aproach to fitting in the problem space as best as possible.

Design

Three types of chromosome, options, vision, movement.

explain hunger thirst metabolism

I experimented with both single and double point crossover of chromosomes

Implementation

I used components from a previous project to create a graphical environment, I designed the components to be reused to make ‘Model View Control’ style programs.

Object orientated code was ideal for this particular project as it required so many different tests and tweaks while being built, I hope to encorperate this options into the GUI and menu at the start however its hard to justify some changes when the genetic problem itself requires so much exploring.

I had to run the program a lot while designing it, I found this difficult as it would take a round or two to present a bug, I added vision and food displays to start with to see why rabbits were getting stuck, I left this but to nature in the end.

the graph objects were useful and should have implemented them sooner, they are basically normalised,







Observations

Options chromosomes were detremental from the offset, they determined the nature of the rabbit a lot and completely effect the outcome of the program many rounds later, I found too that a high mutation rate killed off any chances of any kind of trend and a really high rate disrupted conditioning.

//screen shot in genetic bunnies one and two

Its possible that the graph steadily alternating between the same high and low points int the above image was an options chromosome being copied over from one combination and then back again, I suspect that the following wobbles before some form of optimisation were the mutations that eventually led to new and better optimisations and as I also watched the thirst deaths and food consumption graphs gradually reduce as life time increased I became sure that the genetic algorithm was working and good solutions were being found.

//link genetic bunnies1
 
While testing designs of the program it occurred to me that although there were bugs in some of the agents behavior especially with certain combinations of genes, I could expect the program to breed these issues out for me anyway, this kind of thinking really helped while developing other design solutions as I had to work out how to limit the total amount of thirst and hunger and what cost it should have on the life time of the bunny. I decided to leave that to the algorithm itself to optimise the problems, this actually led to more possibilities that would trend over time.

//link genetic bunnies2
I use the term optimisation a lot, what I really meant was conditioning, maybe edit the youtube video

I found, however that there was a danger of mistaking basic conditioning for adaptation, at the start bunnies with faster metabolisms or thirst ratios that were far too low would dissapear at the beginning however other flaws would present themselves most commonly getting stuck in the watering hole, this led agents to do better than unstuck ones but only for a while.



Often a trend would suddenly be broken and the graphs would show that a change was taking place, there would be destabilisation for a little while then a new level of optimisation, I believed that


Making water less available made the rabbits optimise against dying of thirst sooner and making food less available made the rabbits more optimised against food, the agents had to use the environment to extend their chances of survival however I am surprised that they would optimise in this way rather than the reverse

//show supporting images

Once even a few rabbits had started breeding I noticed that within each round the several generations of rabbits would 

Breeding mechanics and rabbit priotities are particularly fiddly and I would make a future program either more of abstract in design or work with a physics or game engine, wasting time designing and implementing when I could be focusing more on experimentation.

Conclusion



//show screenshot of video

This led to a realisation that while genetic changes are not so much done to an agent by the changes are made by the agent - there may be more than one way to achieve the same results and that is all down to the agent.

Conditioning is a usefull tool with some algorithms but a genetic algorithm can find new possibilities, condition just irons out problems.

I was hoping for more swarm like behaviour but without breeding the project just becomes a very simple optimisation problem.





